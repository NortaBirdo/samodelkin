unit ClientModelUnit;

interface

uses
  System.SysUtils, System.Classes, uADStanIntf, uADStanOption, uADStanParam,
  uADStanError, uADDatSManager, uADPhysIntf, uADDAptIntf, uADStanAsync,
  uADDAptManager, Data.DB, uADCompDataSet, uADCompClient;

type
  TClientModel = class(TDataModule)
    ADQueryClients: TADQuery;
    DataSourceClient: TDataSource;
    ADQueryClientList: TADQuery;
    DataSourceClientList: TDataSource;
    ADQueryClientAccount: TADQuery;
    DataSourceClientAccount: TDataSource;
    ADQuerySQL: TADQuery;
    procedure ADQueryClientsAfterGetRecord(DataSet: TADDataSet);
    procedure ADQueryClientsAfterScroll(DataSet: TDataSet);
    procedure DataModuleCreate(Sender: TObject);
  private
    FirstStart: boolean;
  public

  type
    TStatusTask = (Closer, Work, Prior, Delayed, Wait);

  var
    BalanceClient: integer;

    //работа  балансом
    procedure RefreshOperationClient;
    function GetBalanceClient:integer;
    procedure RegOperationClientBal(sum: string);

    //редактирование
    procedure SetClientFlag(flag:integer);
    function GetClientID: integer;
    function GetClientName:string;
    function GetClientNameForPay:string;

    //сортировка
    procedure ShowActiveClient;
    procedure ShowArchiveClient;
    procedure ShowBlackListClient;

    //обновление списков
    procedure RefreshClient;
    procedure RefreshClientList;

  end;

var
  ClientModel: TClientModel;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses ClientsFormUnit, DataModuleMySQLUnit;

{$R *.dfm}

procedure TClientModel.ADQueryClientsAfterGetRecord(DataSet: TADDataSet);
begin
  RefreshOperationClient;
  BalanceClient := GetBalanceClient;

  if not FirstStart then ClientsForm.BalLabel.Caption := IntToStr(BalanceClient);

end;

procedure TClientModel.ADQueryClientsAfterScroll(DataSet: TDataSet);
begin
  RefreshOperationClient;
  BalanceClient := GetBalanceClient;

  if not FirstStart then ClientsForm.BalLabel.Caption := IntToStr(BalanceClient);

end;

procedure TClientModel.DataModuleCreate(Sender: TObject);
begin
  FirstStart := true;

  ADQueryClientAccount.Active := true;
  ADQueryClients.Active := true;
  ADQueryClientList.Active := true;
end;

function TClientModel.GetBalanceClient: integer;
var
  sQuery: string;
begin
  with ADQuerySQL do
  begin
    close;
    sql.Clear;
    sQuery := 'SELECT SUM(operation) as bal FROM PERSONAL_ACCOUNT WHERE account_type = 0 AND link = '
     + ADQueryClients.FieldByName('id').AsString;
    sql.Add(sQuery);
    open;
    result := FieldByName('bal').AsInteger;
  end;
end;

function TClientModel.GetClientID: integer;
begin
  result := ADQueryClientList.FieldByName('id').AsInteger;
end;

function TClientModel.GetClientName: string;
begin
  result := ADQueryClientList.FieldByName('fio').AsString;
end;

function TClientModel.GetClientNameForPay: string;
begin
  result := ADQueryClients.FieldByName('fio').AsString;
end;

procedure TClientModel.RefreshClient;
begin
  ADQueryClients.Refresh;
end;

procedure TClientModel.RefreshClientList;
begin
  ADQueryClientList.Refresh;
end;

procedure TClientModel.RefreshOperationClient;
var
query: string;
begin
with ADQueryClientAccount do
begin
  close;
  sql.Clear;
  query := 'SELECT * FROM PERSONAL_ACCOUNT ' +
    'WHERE account_type = 0 AND link = ' + ADQueryClients.FieldByName('id').AsString +
    ' ORDER BY date_operation DESC';
  sql.Add(query);
  open;
end;

end;


procedure TClientModel.RegOperationClientBal(sum: string);
begin
//
end;

procedure TClientModel.SetClientFlag(flag: integer);
begin
  ADQueryClients.Edit;
  ADQueryClients.FieldByName('flag').Value := flag;
end;

procedure TClientModel.ShowActiveClient;
begin
 with ADQueryClients do
  begin
    close;
    sql.Clear;
    sql.Add('SELECT * FROM CLIENT WHERE flag = 0');
    open;
  end;
end;

procedure TClientModel.ShowArchiveClient;
begin
  with ADQueryClients do
  begin
    close;
    sql.Clear;
    sql.Add('SELECT * FROM CLIENT WHERE flag = 1');
    open;
  end;
end;

procedure TClientModel.ShowBlackListClient;
begin
  with ADQueryClients do
  begin
    close;
    sql.Clear;
    sql.Add('SELECT * FROM CLIENT WHERE flag = 2');
    open;
  end;
end;

end.
