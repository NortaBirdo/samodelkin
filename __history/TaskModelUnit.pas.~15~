unit TaskModelUnit;

interface

uses uADCompClient, SysUtils, ClientModelUnit;

type

TStatusTask = (Closer, Work, Prior, Delayed, Wait, WaitPay);

TTaskModel = class
  private
    SQLExe: TADQuery;
  public
  QueryConnect: TADQuery;
  constructor Create (Connect: TADConnection);
  procedure TransferTask (IDProjectTo, IdTask: integer);
  procedure DeleteTask (IdTask: integer);
  procedure SetDeadlineNull(IdTask: integer);
  procedure SetStatusTask(newStatus: TStatusTask; idTask: integer);

end;

implementation

{ TTaskModel }

uses MainUnit;

constructor TTaskModel.Create(Connect: TADConnection);
begin
  SQLExe := TADQuery.Create(MainForm);
  SQlExe.Connection := Connect;
end;


procedure TTaskModel.DeleteTask(IdTask: integer);
var
  sQuery: string;
begin
  with SQLExe do
  begin
    close;
    sql.Clear;
    sQuery := 'DELETE FROM TASK WHERE id = ' + IntToStr(IdTask);
    sql.Add(sQuery);
    ExecSQL;
  end;
end;

procedure TTaskModel.SetDeadlineNull(IdTask: integer);
var
  sQuery: string;
begin
  with SQLExe do
  begin
    close;
    sql.Clear;
    sQuery := 'UPDATE TASK SET deadline = NULL WHERE id = ' + IntToStr(IdTask);
    sql.Add(sQuery);
    ExecSQL;
  end;
end;

procedure TTaskModel.SetStatusTask(newStatus: TStatusTask; idTask: integer);
var
  sQuery: string;

begin
  case newStatus of
  closer: sQuery := 'закрыта';
  Work: sQuery := 'в работе';
  Prior: sQuery := 'приоритет';
  Delayed: sQuery := 'отложена';
  Wait: sQuery := 'ожидаю заказчика';
  WaitPay: sQuery := 'ќжидаю оплаты';
  end;

  with SQLExe do
  begin
    close;
    sql.Clear;
    squery := 'UPDATE TASK SET status = ' + QuotedStr(sQuery) + ' WHERE id = ' + IntToStr(idTask);
    sql.Add(sQuery);
    ExecSQL;
  end;
end;

procedure TTaskModel.TransferTask(IDProjectTo, IdTask: integer);
var
  sQuery: string;
begin
  with SQLExe do
  begin
    close;
    sql.Clear;
    sQuery := 'UPDATE TASK SET project_link = ' +  IntToStr(IDProjectTo) + ' WHERE id = ' + IntToStr(IdTask);
    sql.Add(sQuery);
    ExecSQL;
  end;
end;

end.
